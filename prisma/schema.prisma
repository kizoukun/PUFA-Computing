// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
   provider = "prisma-client-js"
}

datasource db {
   provider = "postgresql"
   url      = env("DATABASE_URL")
}

model Merch {
   id          String   @id @default(uuid())
   title       String
   description String
   price       Float
   createdAt   DateTime @default(now())
   updatedAt   DateTime @default(now()) @updatedAt

   MerchImage MerchImage[]
   MerchSize  MerchSize[]
   MerchColor MerchColor[]
}

model MerchImage {
   id       Int    @id @default(autoincrement())
   merchId  String
   imageUrl String
   merch    Merch  @relation(fields: [merchId], references: [id])
}

model MerchSize {
   id      Int    @id @default(autoincrement())
   size    String
   merchId String
   merch   Merch  @relation(fields: [merchId], references: [id])
}

model MerchColor {
   id      Int    @id @default(autoincrement())
   color   String
   merchId String
   merch   Merch  @relation(fields: [merchId], references: [id])
}

model Project {
   id          String   @id @default(uuid())
   title       String
   description String
   major       String
   teamName    String?
   teamMembers String[]
   batch       String
   codeLink    String
   accepted    Boolean  @default(false)
   createdAt   DateTime @default(now())
   updatedAt   DateTime @default(now()) @updatedAt

   ProjectImage ProjectImage[]
}

model ProjectImage {
   id        Int     @id @default(autoincrement())
   projectId String
   imageUrl  String
   project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model Aspiration {
   id             String           @id @default(uuid())
   organizationId Int
   organization   Organization     @relation(fields: [organizationId], references: [id])
   from           String
   anonymous      Boolean          @default(false)
   subject        String
   message        String
   adminResponse  String?
   createdAt      DateTime         @default(now())
   updatedAt      DateTime         @default(now()) @updatedAt
   AspirationLike AspirationLike[]
}

model AspirationLike {
   id           Int        @id @default(autoincrement())
   aspirationId String
   userId       String
   user         Users      @relation(fields: [userId], references: [id])
   aspiration   Aspiration @relation(fields: [aspirationId], references: [id], onDelete: Cascade)
}

model Users {
   id               String             @id @default(uuid())
   password         String
   email            String             @unique
   firstName        String
   lastName         String
   studentId        String             @unique
   majorId          Int
   major            Major              @relation(fields: [majorId], references: [id])
   profilePicture   String?
   dateOfBirth      DateTime?
   yearOfBatch      String
   createAt         DateTime           @default(now())
   updateAt         DateTime           @default(now()) @updatedAt
   AspirationLike   AspirationLike[]
   Event            Event[]
   EventParticipant EventParticipant[]
}

model Major {
   id          Int      @id @default(autoincrement())
   uniqueId    String   @unique
   name        String
   description String
   logo        String
   createdAt   DateTime @default(now())
   updatedAt   DateTime @default(now()) @updatedAt

   Users Users[]
   Event Event[]
}

model Organization {
   id          Int          @id @default(autoincrement())
   name        String
   description String
   logo        String
   createdAt   DateTime     @default(now())
   updatedAt   DateTime     @default(now()) @updatedAt
   Aspiration  Aspiration[]
   Event       Event[]
}

model Event {
   id               Int                @id @default(autoincrement())
   uniqueId         String             @unique
   title            String
   description      String
   startDate        DateTime
   endDate          DateTime
   majorId          Int?
   major            Major?             @relation(fields: [majorId], references: [id])
   organizationId   Int
   organization     Organization       @relation(fields: [organizationId], references: [id])
   authorId         String
   author           Users              @relation(fields: [authorId], references: [id])
   thumbnail        String
   maxParticipant   Int                @default(0)
   createdAt        DateTime           @default(now())
   updatedAt        DateTime           @default(now()) @updatedAt
   EventParticipant EventParticipant[]
}

model EventParticipant {
   id       Int      @id @default(autoincrement())
   eventId  Int
   userId   String
   event    Event    @relation(fields: [eventId], references: [id])
   user     Users    @relation(fields: [userId], references: [id])
   createAt DateTime @default(now())
}
